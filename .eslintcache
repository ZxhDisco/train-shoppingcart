[{"C:\\Code\\trainwork\\shopc\\src\\index.js":"1","C:\\Code\\trainwork\\shopc\\src\\App.js":"2","C:\\Code\\trainwork\\shopc\\src\\components\\Cart.jsx":"3","C:\\Code\\trainwork\\shopc\\src\\components\\Content.jsx":"4","C:\\Code\\trainwork\\shopc\\src\\components\\Header.jsx":"5","C:\\Code\\trainwork\\shopc\\src\\models\\products.js":"6","C:\\Code\\trainwork\\shopc\\src\\models\\cart.js":"7","C:\\Code\\trainwork\\shopc\\src\\api\\index.js":"8"},{"size":321,"mtime":1608527705380,"results":"9","hashOfConfig":"10"},{"size":383,"mtime":1608522789634,"results":"11","hashOfConfig":"10"},{"size":5136,"mtime":1608603142835,"results":"12","hashOfConfig":"10"},{"size":3761,"mtime":1608603320801,"results":"13","hashOfConfig":"10"},{"size":1374,"mtime":1608523411349,"results":"14","hashOfConfig":"10"},{"size":1832,"mtime":1608565346153,"results":"15","hashOfConfig":"10"},{"size":3938,"mtime":1608603263553,"results":"16","hashOfConfig":"10"},{"size":175,"mtime":1608522121605,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1db5kvp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Code\\trainwork\\shopc\\src\\index.js",[],["39","40"],"C:\\Code\\trainwork\\shopc\\src\\App.js",[],"C:\\Code\\trainwork\\shopc\\src\\components\\Cart.jsx",["41"],"import React, { useState,useEffect } from \"react\";\r\nimport { Drawer, List, Image } from \"antd\";\r\nimport { ShoppingCartOutlined } from \"@ant-design/icons\";\r\nimport \"../App.css\";\r\nimport 'antd/dist/antd.css';\r\n\r\nimport { connect } from \"dva\";\r\n\r\nconst Cart = ({ cart, dispatch }) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  const total = cart\r\n    .reduce((total, item) => total + item.product.price * item.quantity, 0)\r\n    .toFixed(2);\r\n\r\n    useEffect(()=> {\r\n      if(window.localStorage.data){\r\n        dispatch({type:\"cart/setStorage\"})\r\n      }\r\n    },[])\r\n  return (\r\n    <>\r\n      <button className=\"cartBtn\" onClick={showDrawer}>\r\n        <ShoppingCartOutlined /><span className=\"showCount\">{cart.length}</span>\r\n      </button>\r\n      <div className=\"cartDiv\">\r\n        <Drawer\r\n          title={\r\n            <div>\r\n              <div className={visible ? \"countCart\" : \"\"}>\r\n                {cart.length}\r\n              </div>\r\n              <span className=\"titleCart\">\r\n                <ShoppingCartOutlined />\r\n                Cart\r\n              </span>\r\n            </div>\r\n          }\r\n          placement=\"right\"\r\n          closable={false}\r\n          onClose={onClose}\r\n          visible={visible}\r\n          width={\"35%\"}\r\n          footer={\r\n            <div style={{ height: \"100px\", position: \"relative\" }}>\r\n              <span className=\"totalTitle\">Total: </span>\r\n              <span className=\"totalNum\">$ {total}</span>\r\n              <br />\r\n              <button\r\n                onClick={() =>\r\n                  dispatch({\r\n                    type: \"cart/checkout\",\r\n                  })\r\n                }\r\n                disabled={cart.length === 0}\r\n                className=\"checkBtn\"\r\n              >\r\n                Check Out\r\n              </button>\r\n            </div>\r\n          }\r\n          headerStyle={{ textAlign: \"center\", backgroundColor: \"#1b1a20\" }}\r\n          bodyStyle={{ backgroundColor: \"#1b1a20\" }}\r\n          footerStyle={{ backgroundColor: \"#1b1a20\", color: \"#fff\" }}\r\n        >\r\n          {cart.length === 0 ? (\r\n            <h1 style={{ color: \"#fff\" }}>Your Shopping-Cart is empty!</h1>\r\n          ) : (\r\n            <div>\r\n              <List\r\n                itemLayout=\"horizontal\"\r\n                dataSource={cart}\r\n                renderItem={(item, index) => (\r\n                  <List.Item>\r\n                    <Image\r\n                      src={`./img/${item.product.sku}_1.jpg`}\r\n                      className=\"cartImg\"\r\n                    />\r\n                    <div className=\"detail\">\r\n                      {item.product.title}\r\n                      <br />\r\n                      <span>\r\n                        {item.size} | {item.product.description}\r\n                      </span>\r\n                      <br />\r\n                      <span>quantity: {item.quantity}</span>\r\n                    </div>\r\n                    <div>\r\n                      <button\r\n                        className=\"btnDel\"\r\n                        onClick={() => {\r\n                          dispatch({\r\n                            type: \"cart/removeCart\",\r\n                            payload: {\r\n                              index: index,\r\n                            },\r\n                          });\r\n                        }}\r\n                      >\r\n                        X\r\n                      </button>\r\n                      <p className=\"goodsPrice\">${item.product.price}</p>\r\n                      <p>\r\n                        <button\r\n                          className=\"btnDecrement\"\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"cart/decreaseNum\",\r\n                              payload: {\r\n                                id: item.id,\r\n                                size: item.size,\r\n                                key: -1,\r\n                              },\r\n                            });\r\n                          }}\r\n                        >\r\n                          -\r\n                        </button>\r\n                        <button\r\n                          className=\"btnIncrement\"\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"cart/increaseNum\",\r\n                              payload: {\r\n                                id: item.id,\r\n                                size: item.size,\r\n                                key: 1,\r\n                              },\r\n                            });\r\n                          }}\r\n                        >\r\n                          +\r\n                        </button>\r\n                      </p>\r\n                    </div>\r\n                  </List.Item>\r\n                )}\r\n              />\r\n            </div>\r\n          )}\r\n        </Drawer>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ cart }) => ({\r\n  cart: cart.data,\r\n});\r\nexport default connect(mapStateToProps)(Cart);\r\n","C:\\Code\\trainwork\\shopc\\src\\components\\Content.jsx",["42","43","44"],"import React, { useEffect, Fragment } from \"react\";\r\nimport { Card, Popover, Button, Col, List, message } from \"antd\";\r\nimport Header from \"./Header\";\r\nimport \"../App.css\";\r\nimport { connect } from \"dva\";\r\nimport cart from \"../models/cart\";\r\n\r\n\r\nconst { Meta } = Card;\r\n\r\nconst Products = ({ dispatch, products }) => {\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: \"products/fetch\",\r\n      payload: {},\r\n    });\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    dispatch({\r\n      type: \"products/fetch\",\r\n      payload:{}\r\n    });\r\n  },[cart])\r\n\r\n  useEffect(()=> {\r\n    if(window.localStorage.data){\r\n      dispatch({type:\"cart/setStorage\"})\r\n    }else{\r\n      return null\r\n    }\r\n  },[])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Header count={products.length} />\r\n      {products.map((item, index) => {\r\n        return (\r\n          <Col\r\n            xs={20}\r\n            sm={10}\r\n            md={7}\r\n            lg={5}\r\n            key={item.id}\r\n            style={{ marginTop: \"15px\" }}\r\n          >\r\n            <Card\r\n              hoverable\r\n              cover={<img alt=\"ex\" src={`./img/${item.sku}_1.jpg`} />}\r\n              style={{ textAlign: \"center\" }}\r\n            >\r\n              {item.isFreeShipping?<div style={{position:'relative'}}>\r\n                <span className=\"freeShip\">Free Shipping</span>\r\n              </div>:''}\r\n              <Meta title={item.title} />\r\n              <span className=\"contentLine\">————</span>\r\n              <br />\r\n              <span className=\"price\">$</span>\r\n              <span className=\"priceInt\">\r\n                {item.price - (item.price % 1)}\r\n              </span>\r\n              <span className=\"priceFloat\">\r\n                {item.price % 1 === 0\r\n                  ? \"\"\r\n                  : \".\" + item.price.toString().split(\".\")[1]}\r\n              </span>\r\n              <br />\r\n             \r\n                  \r\n              <Popover\r\n                content={\r\n                  <List\r\n                    size=\"small\"\r\n                    dataSource={item.availableSizes}\r\n                    renderItem={(size) => (\r\n                      <List.Item>\r\n                        <Button\r\n                          disabled={item.installments===0}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"cart/addCart\",\r\n                              payload: {\r\n                                product_id: item.id,\r\n                                quantity: item.installments > 0 ? 1 : 0,\r\n                                product: item,\r\n                                size: size,\r\n                              },\r\n                            });\r\n                            item.installments === 0\r\n                              ? message.error(\"库存不足\")\r\n                              : message.success(\"添加成功\");\r\n                          }}\r\n                          block\r\n                        >\r\n                          {size}\r\n                          {console.log(item.installments,'库存')}\r\n                        </Button>\r\n                        \r\n                      </List.Item>\r\n                    )}\r\n                  />\r\n                }\r\n                title=\"选择你的尺码\"\r\n                trigger=\"click\"\r\n              >\r\n                <button\r\n                  disabled={item.installments === 0}\r\n                  className=\"contentBtn\"\r\n                >\r\n                  Add to Car\r\n                </button>\r\n              </Popover>\r\n            </Card>\r\n          </Col>\r\n        );\r\n      })}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ products }) => ({\r\n  products: products.data,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Products);\r\n","C:\\Code\\trainwork\\shopc\\src\\components\\Header.jsx",[],"C:\\Code\\trainwork\\shopc\\src\\models\\products.js",["45","46","47","48"],"import * as api from \"../api/index\";\r\n\r\nexport default {\r\n  namespace: \"products\",\r\n  state: {\r\n    data: [],\r\n  },\r\n  effects: {\r\n    *fetch({ payload: {} }, { call, put }) {\r\n      const data = yield call(api.getProducts, {});\r\n      yield put({ type: \"save\", payload: { data } });\r\n    },\r\n    *sortDatas({ payload: { product, key } }, { put }) {\r\n      let newData = [];\r\n      if (key === \"asc\") {\r\n        newData = product.sort((a, b) => a[\"price\"] - b[\"price\"]);\r\n      } else if (key === \"desc\") {\r\n        newData = product.sort((a, b) => b[\"price\"] - a[\"price\"]);\r\n      } else {    \r\n       // product.map((item) => console.log(item[\"price\"]))\r\n        // newData = product.filter((item) => {\r\n        //   return item.availableSizes.includes(\"XL\")\r\n        // });\r\n        // console.log(newData);\r\n  \r\n        newData = product.sort((a, b) => a[\"id\"] - b[\"id\"]);\r\n      }\r\n      yield put({\r\n        type: \"setData\",\r\n        data: [...newData],\r\n      });\r\n    },\r\n  },\r\n  reducers: {\r\n    save(state, { payload }) {\r\n      return {\r\n        data: payload.data,\r\n      };\r\n    },\r\n    addOne(state,{payload}){\r\n      const {data} = state\r\n      const newData = JSON.parse(JSON.stringify(data))\r\n      newData.map((item)=>{\r\n        if(item.id = payload.product_id){\r\n          ++item.installments\r\n        }\r\n      })\r\n      return {\r\n        data:newData\r\n      }\r\n    },\r\n    addCart(state, { payload }) {\r\n      const newData = state.data.map((item) => {\r\n        if (item.id === payload.product_id && item.installments > 0) {\r\n          item.installments--;\r\n          return item;\r\n        }\r\n        return item;\r\n      });\r\n      return {\r\n        data: newData,\r\n      };\r\n    },\r\n    setData(state, payload) {\r\n      return {\r\n        ...state,\r\n        data: [...payload.data],\r\n      };\r\n    },\r\n  },\r\n};\r\n","C:\\Code\\trainwork\\shopc\\src\\models\\cart.js",["49","50","51"],"import { message } from \"antd\";\r\nexport default {\r\n  namespace: \"cart\",\r\n  state: {\r\n    data: [],\r\n  },\r\n  effects: {\r\n    *addCart({ payload }, { put }) {\r\n      yield put({ type: \"products/addCart\", payload });\r\n      yield put({ type: \"saveItem\", payload });\r\n    },\r\n    *setStorage({},{ put }){\r\n      yield put ({\r\n        type:\"storageData\",\r\n        cdata:{\r\n          _data: JSON.parse(window.localStorage.data)\r\n        }\r\n      })\r\n    },\r\n    *settlementData({},{put}){\r\n      yield put({type:\"settlement\"})\r\n    },\r\n    *decreaseNum({ payload },{put}) {\r\n      yield put({\r\n        type:'cutOne',\r\n        payload\r\n      })\r\n      yield put({\r\n        type:'products/addOne',\r\n        payload\r\n      })\r\n    },*increaseNum({payload}, {put}){\r\n      yield put ({\r\n        type:\"increment\",\r\n        payload\r\n      })\r\n    },*removeCart({payload}, {put}){\r\n      yield put ({\r\n        type:\"removeGood\",\r\n        payload\r\n      })\r\n    }\r\n  },\r\n  reducers: {\r\n    saveItem(state, { payload }) {\r\n      const {data} = state\r\n      let newData = [];\r\n      const finded = data.find(\r\n        (item) =>\r\n          item.product_id === payload.product_id && item.size === payload.size\r\n      );\r\n      if (finded) {\r\n        finded.quantity += payload.quantity;\r\n        newData = data.map((item) =>\r\n          item.product_id === finded.product_id && item.size === finded.size\r\n            ? finded\r\n            : item\r\n        );\r\n      } else {\r\n        newData = [...data, payload];\r\n      }\r\n      \r\n      const storage = window.localStorage\r\n      let _data = JSON.stringify(data)\r\n      storage.setItem(\"data\",_data)\r\n      return {\r\n        data: newData,\r\n      };\r\n    },\r\n    removeGood(state, { payload }) {\r\n      const {data} = state\r\n      data.splice(payload.index, 1);\r\n      \r\n      const storage = window.localStorage\r\n      let _data = JSON.stringify(data)\r\n      storage.setItem(\"data\",_data)\r\n      console.log(_data,'remove');\r\n\r\n      return { data: [...data] };\r\n    },\r\n    increment(state, { payload }) {\r\n      const { data } = state;\r\n      const index = data.findIndex(\r\n        (item) => item.id === payload.id && item.size === payload.size\r\n      );\r\n      if (data[index].product.installments === 0) {\r\n        message.error(\"库存不足\");\r\n      } else {\r\n        data[index].quantity += payload.key;\r\n        data[index].product.installments -= payload.key;\r\n        console.log(data[index].quantity);\r\n      }\r\n      const storage = window.localStorage\r\n      let _data = JSON.stringify(data)\r\n      storage.setItem(\"data\",_data)\r\n      console.log(_data,'increase');\r\n\r\n      return { data: [...data] };\r\n    },\r\n    \r\n    storageData(state,{cdata}){\r\n      return {\r\n        data:cdata._data\r\n      }\r\n    },\r\n    settlement(state,{data}){\r\n      const storage = window.localStorage\r\n      let _data = JSON.stringify(data)\r\n      storage.setItem(\"data\",_data)\r\n      console.log(_data,'settlement');\r\n\r\n      return{\r\n        ...state,\r\n        data:data._data\r\n      }\r\n    },\r\n    checkout(state) {\r\n      const {data} = state\r\n      data.splice(0,data.length)\r\n      const storage = window.localStorage\r\n      let _data = JSON.stringify(data)\r\n      storage.setItem(\"data\",_data)\r\n      return {\r\n        data: [...data],\r\n      };\r\n    },\r\n    cutOne(state,{payload}){\r\n      const { data } = state;\r\n      const index = data.findIndex(\r\n        (item) => item.id === payload.id && item.size === payload.size\r\n      );\r\n      if (data[index].quantity === 1) {\r\n        message.error(\"库存只有一件啦，不能再减了\");\r\n      } else {\r\n        data[index].quantity += payload.key;\r\n        data[index].product.installments -= payload.key;\r\n        console.log(data[index].product.installments);\r\n      }\r\n      const storage = window.localStorage\r\n      let _data = JSON.stringify(data)\r\n      storage.setItem(\"data\",_data)\r\n\r\n      return { data: [...data] };\r\n    }\r\n  },\r\n};\r\n","C:\\Code\\trainwork\\shopc\\src\\api\\index.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":26,"column":7,"nodeType":"58","endLine":26,"endColumn":9,"suggestions":"59"},{"ruleId":"56","severity":1,"message":"57","line":17,"column":6,"nodeType":"58","endLine":17,"endColumn":8,"suggestions":"60"},{"ruleId":"56","severity":1,"message":"61","line":24,"column":5,"nodeType":"58","endLine":24,"endColumn":11,"suggestions":"62"},{"ruleId":"56","severity":1,"message":"57","line":32,"column":5,"nodeType":"58","endLine":32,"endColumn":7,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":3,"column":1,"nodeType":"66","endLine":71,"endColumn":3},{"ruleId":"67","severity":1,"message":"68","line":9,"column":23,"nodeType":"69","messageId":"70","endLine":9,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":43,"column":25,"nodeType":"73","messageId":"74","endLine":43,"endColumn":27},{"ruleId":"75","severity":1,"message":"76","line":44,"column":12,"nodeType":"77","messageId":"78","endLine":44,"endColumn":40},{"ruleId":"64","severity":1,"message":"65","line":2,"column":1,"nodeType":"66","endLine":146,"endColumn":3},{"ruleId":"67","severity":1,"message":"68","line":12,"column":17,"nodeType":"69","messageId":"70","endLine":12,"endColumn":19},{"ruleId":"67","severity":1,"message":"68","line":20,"column":21,"nodeType":"69","messageId":"70","endLine":20,"endColumn":23},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["81"],["82"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. Outer scope values like 'cart' aren't valid dependencies because mutating them doesn't re-render the component.",["83"],["84"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},{"desc":"85","fix":"87"},{"desc":"85","fix":"88"},{"desc":"85","fix":"89"},"Update the dependencies array to be: [dispatch]",{"range":"90","text":"91"},{"range":"92","text":"91"},{"range":"93","text":"91"},{"range":"94","text":"91"},[689,691],"[dispatch]",[422,424],[527,533],[677,679]]